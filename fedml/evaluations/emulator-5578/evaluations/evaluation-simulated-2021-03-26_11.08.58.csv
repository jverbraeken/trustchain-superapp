environment, simulationIndex, elapsedTime, epoch, iteration, accuracy, f1, precision, recall, gmeasure, mcc, score, before or after averaging, #peers included in current batch, before or after averaging, #peers included in current batch
Figure 6.4 - average - transfer, 0, 10444, 0, 0, 0.1, 0.18181818181818182, 0.1, 0.1, 0.03162277660168379, NaN, 0.0, before, 0
java.lang.IllegalArgumentException: Not implemented yet 	at nl.tudelft.trustchain.fedml.ai.SimulatedRunner.shareModel(SimulatedRunner.kt:196) 	at nl.tudelft.trustchain.fedml.ai.SimulatedRunner.access$shareModel(SimulatedRunner.kt:20) 	at nl.tudelft.trustchain.fedml.ai.SimulatedRunner$performTest$2$3.invoke(SimulatedRunner.kt:93) 	at nl.tudelft.trustchain.fedml.ai.SimulatedRunner$performTest$2$3.invoke(SimulatedRunner.kt:20) 	at nl.tudelft.trustchain.fedml.ai.Node.performIteration(Node.kt:188) 	at nl.tudelft.trustchain.fedml.ai.SimulatedRunner.performTest(SimulatedRunner.kt:114) 	at nl.tudelft.trustchain.fedml.ai.SimulatedRunner.access$performTest(SimulatedRunner.kt:20) 	at nl.tudelft.trustchain.fedml.ai.SimulatedRunner$simulate$1.invokeSuspend(SimulatedRunner.kt:59) 	at kotlin.coroutines.jvm.internal.BaseContinuationImpl.resumeWith(ContinuationImpl.kt:33) 	at kotlinx.coroutines.DispatchedTask.run(DispatchedTask.kt:106) 	at kotlinx.coroutines.scheduling.CoroutineScheduler.runSafely(CoroutineScheduler.kt:571) 	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.executeTask(CoroutineScheduler.kt:750) 	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.runWorker(CoroutineScheduler.kt:678) 	at kotlinx.coroutines.scheduling.CoroutineScheduler$Worker.run(CoroutineScheduler.kt:665) 
